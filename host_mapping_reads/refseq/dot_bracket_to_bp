#!/usr/bin/env perl

use strict;
use Getopt::Long;

my $print_usage = 0;
my $offset = 1;
my $seq_name = undef;

my $usage = <<USAGE;

  This script converts a dot bracket notation (RNA structure) file 
  into a file that describes whether individual bases in an RNA are 
  in which of the following categories:

    - not_paired:       .              not interacting with other bases
    - base_paired:      ( )            in a dsRNA helix
    - pseudo_knot:      [ { } ]        in a higher-order pseudo-knot type interaction
    - not_in_structure: -              not present in structure 

  Prints tab-delimited output to stdout with three columns: 
  seq_name position category

  Mark Stenglein,  1/27/2023

  Usage: $0 [-h] dot_bracket_format_file

   [-h]          print this message

   [-n] seq_name sequence name [required]

   [-o] offset   will begin sequence position numbers at this value
                 default = $offset

USAGE

if ((scalar @ARGV == 0) and -t STDIN) { print $usage and exit; }

GetOptions ("h"   => \$print_usage,
            "n=s" => \$seq_name,
            "o=i" => \$offset);

if (!defined $seq_name) { print "$usage\nERROR: must specify sequence name [-n]\n" and exit; }


my $position = $offset;
while (<>)
{
   chomp;
   # split into individual charactres
   my @chars = split (//);   

   my $category = "";
   foreach my $char (@chars) {
     if ($char eq ".") {
        $category = "not_paired";
     }
     elsif ($char eq "(" or $char eq ")") {
        $category = "base_paired";
     }
     # elsif ($char eq "[" or $char eq "]" or $char eq "{" or $char eq "}") {
     elsif ($char =~ /[\[\]\{\}\<\>a-zA-Z]/) {
        $category = "pseudo_knot";
     }
     elsif ($char eq "-") {
        $category = "not_in_structure";
     }
     else {
        die "error: unsupported dot-bracket character: $char\n";
     } 
     print "$seq_name\t$position\t$category\n";
     $position += 1;
   }
}
